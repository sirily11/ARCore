/*
 * Copyright 2019 Google LLC. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <CoreVideo/CoreVideo.h>
#import <UIKit/UIKit.h>

@class GARAugmentedFaceFrame;

NS_ASSUME_NONNULL_BEGIN

/**
 * Delegate that outputs a GARAugmentedFaceFrame for the passed in `CVPixelBufferRef`s.
 */
API_AVAILABLE(ios(11.0))
@protocol GARAugmentedFaceSessionDelegate <NSObject>

@required
/**
 * Delegate callback that provides a GARAugmentedFaceFrame whenever it is updated.
 *
 * @param frame The frame created from calling
 *              GARAugmentedFaceSession#updateWithPixelBuffer:timestamp:recognitionRotation:
 */
- (void)didUpdateFrame:(GARAugmentedFaceFrame *)frame;

@end

/**
 * The domain for NSError's generated by a GARAugmentedFaceSession.
 */
FOUNDATION_EXTERN const NSErrorDomain _Nonnull GARAugmentedFaceSessionErrorDomain;

/**
 * Possible codes for NSError's generated by a GARAugmentedFaceSession.
 */
typedef NS_ERROR_ENUM(GARAugmentedFaceSessionErrorDomain, GARAugmentedFaceSessionErrorCode) {
  /**
   * This device or OS version is not currently supported.
   * Supported OS versions are documented in README.md.
   */
  GARAugmentedFaceSessionErrorCodeDeviceNotCompatible = -1,
};

/**
 * ARCore Augmented Face Session.
 *
 * Class is used to take in a series of `CVPixelBufferRef`s and outputs a 3D Face
 * Mesh for the detected face.
 */
API_AVAILABLE(ios(11.0))
@interface GARAugmentedFaceSession : NSObject

/**
 * The most recent frame created from calling
 * GARAugmentedFaceSession#updateWithPixelBuffer:timestamp:recognitionRotation:
 */
@property(atomic, readonly, nullable) GARAugmentedFaceFrame *currentFrame;

/**
 * Delegate that receives callbacks from the face session.
 */
@property(atomic, weak, nullable) id<GARAugmentedFaceSessionDelegate> delegate;

/**
 * The dispatch queue through which the face session calls your delegate methods.
 */
@property(atomic, nullable) dispatch_queue_t delegateQueue;

/**
 * Initializes a GARAugmentedFaceSession with the camera's field of view.
 *
 * @param fieldOfView The camera device's horizontal field of view in degrees.
 * @param error Out parameter for an NSError. Possible errors:
 *              GARAugmentedFaceSessionErrorCodeDeviceNotCompatible - this device or OS version
 *                                                                    is not currently supported.
 *
 * @return An initialized GARAugmentedFaceSession or `nil` if there is an error.
 */
- (instancetype _Nullable)initWithFieldOfView:(float)fieldOfView error:(NSError **)error;

/// @cond
/**
 * Instantiate using initWithFieldOfView:error:.
 */
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)new NS_UNAVAILABLE;
/// @endcond

/**
 * Provides the Face Mesh API with a new pixel buffer so it will capture a face frame.
 *
 * @param pixelBuffer `CVPixelBufferRef` containing camera image.
 * @param timestamp Timestamp that you wish to associate with this image. Timestamps must
 *  monotonically increase on successive calls to this method.
 * @param recognitionRotation The counter-clockwise rotation in degrees required to orient the face
 *  upwards for face detection.
 *  NOTE: The default camera orientation is landscape left. When holding the phone in portrait and
 *  taking a selfie this should be set to 270. The 270 degree rotation rotates a
 * landscape camera image to portrait with the head pointing up.
 *
 * @return `YES` if the frame was accepted for processing. `NO` if the frame was not accepted for
 *  processing. This will occur when the session has too many frames in the queue to process.
 */
- (BOOL)updateWithPixelBuffer:(CVPixelBufferRef)pixelBuffer
                    timestamp:(NSTimeInterval)timestamp
          recognitionRotation:(NSUInteger)recognitionRotation;

@end

NS_ASSUME_NONNULL_END
